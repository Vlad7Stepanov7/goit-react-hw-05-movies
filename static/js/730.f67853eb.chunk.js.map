{"version":3,"file":"static/js/730.f67853eb.chunk.js","mappings":"sQAGaA,GAAUC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAe,8IAWzBE,EAAcF,EAAAA,GAAAA,GAAS,oIAOvBG,EAAgBH,EAAAA,GAAAA,IAAU,8CAI1BI,EAAOJ,EAAAA,GAAAA,GAAS,6C,kBCsC7B,EAzDe,WAAO,IAAD,EACnB,GAA+CK,EAAAA,EAAAA,IAAQ,CACrDC,cAAe,CACbC,YAAa,MAFTC,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAM1BC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,UAAS,IAAG,eAAjCC,EAAM,KAAEC,EAAS,KACxB,GAAwCC,EAAAA,EAAAA,MAAiB,eAAlDC,EAAY,KAAEC,EAAe,KAC9BC,EAAiC,QAA5B,EAAGF,EAAaG,IAAI,gBAAQ,QAAI,IAE3CC,EAAAA,EAAAA,YAAU,WACQ,KAAVF,IAING,EAAAA,EAAAA,IAAgBH,GAAOI,MAAK,SAAAT,GAAM,OAAIC,EAAUD,EAAOU,QAAQ,GACjE,GAAG,CAACL,IASF,OACI,iCACA,6BACG,0BACC,UAACjB,EAAW,YACV,yBAAI,SAACH,EAAO,CAAC0B,GAAG,IAAG,qBACnB,yBAAI,SAAC1B,EAAO,CAAC0B,GAAG,UAAS,8BAKhC,SAACtB,EAAa,WACjB,kBAAMuB,SAAUjB,GAnBD,SAAAU,GACf,IAAQZ,EAAgBY,EAAhBZ,YACRW,EAAgB,CAAEC,MAAOZ,IAEzBG,EAAW,cACX,IAcuC,WAC/B,4BAAWF,EAAS,kBACpB,mBAAQmB,KAAK,SAAQ,0BAIzB,SAACvB,EAAI,UACFU,EAAOc,OAAS,GAChBd,EAAOe,KAAI,YAAkB,IAAhBC,EAAK,EAALA,MAAOC,EAAE,EAAFA,GAClB,OAAO,yBACL,SAAC,KAAI,CAACN,GAAE,kBAAaM,GAAMC,MAAO,CAAEC,KAAMtB,GAAW,SAAEmB,KADzCC,EAGjB,QAIZ,C,uJC7DA,IAAMG,EAAM,mCACNC,EAAW,+BAEJC,EAAc,WACvB,OAAOC,MAAM,GAAD,OAAIF,EAAQ,wCAAgCD,IAAOX,MAAK,SAAAe,GACjE,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE5B,OAAOH,EAASI,MACrB,GACH,EAEaC,EAAsB,SAACZ,GAChC,OAAOM,MAAM,GAAD,OAAIF,EAAQ,kBAAUJ,EAAE,oBAAYG,EAAG,oBAAmBX,MAAK,SAAAe,GACxE,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE5B,OAAOH,EAASI,MACrB,GACH,EAEapB,EAAkB,SAACH,GAC5B,OAAOkB,MAAM,GAAD,OAAIF,EAAQ,iCAAyBD,EAAG,kBAAUf,EAAK,+CAA8CI,MAAK,SAAAe,GACnH,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE5B,OAAOH,EAASI,MACrB,GACH,EAEaE,EAAkB,SAACb,GAC7B,OAAOM,MAAM,GAAD,OAAIF,EAAQ,kBAAUJ,EAAE,4BAAoBG,EAAG,oBAAmBX,MAAK,SAAAe,GAC/E,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE5B,OAAOH,EAASI,MACrB,GACH,EAEaG,EAAkB,SAACd,GAC5B,OAAOM,MAAM,GAAD,OAAIF,EAAQ,kBAAUJ,EAAE,4BAAoBG,EAAG,oBAAmBX,MAAK,SAAAe,GAChF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE5B,OAAOH,EAASI,MACrB,GACH,C","sources":["components/Movies/Movies.styled.jsx","components/Movies/Movies.jsx","utils/API.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const NavItem = styled(NavLink)`\nmargin-left: 20px;\ntext-decoration: none;\n  font-size: 36px;\n  color: #000;\n\n  &.active {\n    color: red;\n  }\n`;\n\nexport const ListNavItem = styled.ul`\n  list-style: none;\n  display: flex;\n  height: 60px;\n  box-shadow: 0px 5px 5px 0px rgba(150,142,150,1);\n`;\n\nexport const ContainerForm = styled.div`\n  margin-left: 50px;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n`;","import { getSearchMovies } from \"utils/API\";\nimport { useForm } from \"react-hook-form\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { ListNavItem, NavItem, ContainerForm, List } from \"./Movies.styled\";\nimport { useState, useEffect } from \"react\";\n\nconst Movies = () => {\n  const { register, handleSubmit, resetField } = useForm({\n    defaultValues: {\n      searchQuery: '',\n    }\n  });\n\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(\"query\") ?? '';\n\n  useEffect(() => {\n      if (query === '') {\n        return\n    }\n\n    getSearchMovies(query).then(movies => setMovies(movies.results))\n  }, [query])\n\n  const onSubmit = query => {\n    const { searchQuery } = query;\n    setSearchParams({ query: searchQuery })\n    \n    resetField(\"searchQuery\");\n    }\n    \n    return (\n        <>\n        <header>\n           <nav>\n            <ListNavItem>\n              <li><NavItem to=\"/\">Home</NavItem></li>\n              <li><NavItem to=\"/movies\">Movies</NavItem></li>\n            </ListNavItem>   \n          </nav>\n        </header>\n\n       <ContainerForm>    \n    <form onSubmit={handleSubmit(onSubmit)}>\n            <input {...register(\"searchQuery\")} />\n            <button type=\"submit\">Search</button>\n    </form>\n        </ContainerForm>\n\n        <List>\n          {movies.length > 0 && \n           movies.map(({title, id}) => {\n             return <li key={id}>\n               <Link to={`/movies/${id}`} state={{ from: location }}>{title}</Link>\n             </li>\n            })}\n        </List>\n            </>\n )\n}\n\nexport default Movies;","const KEY = \"aaf79569db7508d9603d7e27ccd5678a\";\nconst BASE_URL = \"https://api.themoviedb.org/3\";\n\nexport const getTrending = () => {\n    return fetch(`${BASE_URL}/trending/movie/week?api_key=${KEY}`).then(response => {\n       if (!response.ok) {\n           throw new Error(response.status);\n        }\n        return response.json();\n   })\n}\n\nexport const getDetailsMovieById = (id) => {\n    return fetch(`${BASE_URL}/movie/${id}?api_key=${KEY}&language=en-US`).then(response => {\n       if (!response.ok) {\n           throw new Error(response.status);\n        }\n        return response.json();\n   })\n}\n\nexport const getSearchMovies = (query) => {\n    return fetch(`${BASE_URL}/search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`).then(response => {\n       if (!response.ok) {\n           throw new Error(response.status);\n        }\n        return response.json();\n   })\n}\n\nexport const getMovieCredits = (id) => {\n   return fetch(`${BASE_URL}/movie/${id}/credits?api_key=${KEY}&language=en-US`).then(response => {\n       if (!response.ok) {\n           throw new Error(response.status);\n        }\n        return response.json();\n   })\n}\n\nexport const getMovieReviews = (id) => {\n    return fetch(`${BASE_URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US`).then(response => {\n       if (!response.ok) {\n           throw new Error(response.status);\n        }\n        return response.json();\n   })\n}"],"names":["NavItem","styled","NavLink","ListNavItem","ContainerForm","List","useForm","defaultValues","searchQuery","register","handleSubmit","resetField","location","useLocation","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getSearchMovies","then","results","to","onSubmit","type","length","map","title","id","state","from","KEY","BASE_URL","getTrending","fetch","response","ok","Error","status","json","getDetailsMovieById","getMovieCredits","getMovieReviews"],"sourceRoot":""}